<template>
  <div class="app-container">
    <el-form :model="queryParams" ref="queryForm" :inline="true" label-width="68px">
      <el-form-item label="文章标题" prop="title">
        <el-input
            v-model="queryParams.title"
            placeholder="请输入文章标题"
            clearable
            style="width: 240px"
            @keyup.enter.native="handleQuery"
        />
      </el-form-item>
      <el-form-item label="文章分类" prop="articleType">
        <el-select v-model="queryParams.articleType" placeholder="文章分类" clearable style="width: 240px">
          <el-option label="技术" value="技术" />
          <el-option label="生活" value="生活" />
          <el-option label="思考" value="思考" />
          <el-option label="读书" value="读书" />
        </el-select>
      </el-form-item>
      <el-form-item label="状态" prop="status">
        <el-select v-model="queryParams.status" placeholder="文章状态" clearable style="width: 240px">
          <el-option label="编辑中" value="editting" />
          <el-option label="已发布" value="published" />
          <el-option label="草稿" value="draft" />
        </el-select>
      </el-form-item>
      <el-form-item>
        <el-button type="primary" icon="el-icon-search" @click="handleQuery">搜索</el-button>
        <el-button icon="el-icon-refresh" @click="resetQuery">重置</el-button>
      </el-form-item>
    </el-form>

    <el-row :gutter="10" class="mb8">
      <el-col :span="1.5">
        <el-button
            type="primary"
            plain
            icon="el-icon-plus"
            @click="handleAdd"
            v-hasPermi="['proj_qhy:article:add']"
        >新增</el-button>
      </el-col>
      <el-col :span="1.5">
        <el-button
            type="success"
            plain
            icon="el-icon-edit"
            :disabled="single"
            @click="handleUpdate"
            v-hasPermi="['proj_qhy:article:edit']"
        >修改</el-button>
      </el-col>
      <el-col :span="1.5">
        <el-button
            type="danger"
            plain
            icon="el-icon-delete"
            :disabled="multiple"
            @click="handleDelete"
            v-hasPermi="['proj_qhy:article:remove']"
        >删除</el-button>
      </el-col>
      <el-col :span="1.5">
        <el-button
            type="warning"
            plain
            icon="el-icon-download"
            @click="handleExport"
            v-hasPermi="['proj_qhy:article:export']"
        >导出</el-button>
      </el-col>
    </el-row>

    <!-- B站风格文章列表 -->
    <div class="article-list" v-loading="loading">
      <div
          class="article-item"
          v-for="article in articleList"
          :key="article.id"
          @click="handleArticleClick(article)"
      >
        <div class="article-cover">
          <el-image
              :src="article.cover"
              fit="cover"
              class="cover-image"
          >
            <div slot="error" class="image-slot">
              <i class="el-icon-picture-outline"></i>
            </div>
          </el-image>
        </div>

        <div class="article-content">
          <div class="article-header">
            <h3 class="article-title">{{ article.title }}</h3>
            <div class="action-buttons">
              <el-button
                  type="text"
                  class="like-btn"
                  @click.stop="handleLike(article)"
              >
                <i class="el-icon-thumb"></i>
                {{ article.likeCount || 0 }}
              </el-button>
              <el-button
                  type="text"
                  class="hate-btn"
                  @click.stop="handleHate(article)"
              >
                <i class="el-icon-thumb"></i>
                {{ article.hateCount || 0 }}
              </el-button>
            </div>
          </div>

          <p class="article-digest">{{ article.digest || '暂无摘要' }}</p>

          <div class="article-meta">
            <span class="article-author">{{ article.author || '未知作者' }}</span>

            <div class="article-stats">
              <span class="view-count">{{ article.viewCount || 0 }} 观看</span>
              <span class="publish-time">{{ parseTime(article.createTime, '{y}-{m}-{d} {h}:{i}:{s}') }}</span>
            </div>
          </div>

          <div class="article-actions">
            <el-button
                size="mini"
                type="text"
                icon="el-icon-edit"
                @click.stop="handleUpdate(article)"
                v-hasPermi="['proj_qhy:article:edit']"
            >修改</el-button>
            <el-button
                size="mini"
                type="text"
                icon="el-icon-delete"
                @click.stop="handleDelete(article)"
                v-hasPermi="['proj_qhy:article:remove']"
            >删除</el-button>
          </div>
        </div>
      </div>
    </div>

    <pagination
        v-show="total>0"
        :total="total"
        :page.sync="queryParams.pageNum"
        :limit.sync="queryParams.pageSize"
        @pagination="getList"
    />

    <!-- 添加或修改文章管理对话框 -->
    <el-dialog :title="title" :visible.sync="open" width="800px" append-to-body>
      <el-form ref="form" :model="form" :rules="rules" label-width="80px">
        <el-form-item label="文章标题" prop="title">
          <el-input v-model="form.title" placeholder="请输入文章标题" />
        </el-form-item>
        <el-form-item label="文章分类" prop="articleType">
          <el-select v-model="form.articleType" placeholder="请选择文章分类">
            <el-option label="技术" value="技术" />
            <el-option label="生活" value="生活" />
            <el-option label="思考" value="思考" />
            <el-option label="读书" value="读书" />
          </el-select>
        </el-form-item>
        <el-form-item label="状态" prop="status">
          <el-radio-group v-model="form.status">
            <el-radio label="editting">编辑中</el-radio>
            <el-radio label="published">已发布</el-radio>
            <el-radio label="draft">草稿</el-radio>
          </el-radio-group>
        </el-form-item>
        <el-form-item label="文章摘要" prop="digest">
          <el-input v-model="form.digest" type="textarea" placeholder="请输入内容" />
        </el-form-item>
        <el-form-item label="文章内容" prop="content">
          <editor v-model="form.content" :min-height="192"/>
        </el-form-item>
        <el-form-item label="封面图片" prop="cover">
          <imageUpload v-model="form.cover"/>
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button type="primary" @click="submitForm">确 定</el-button>
        <el-button @click="cancel">取 消</el-button>
      </div>
    </el-dialog>
  </div>
</template>

<script>
  import { listArticle, getArticle, delArticle, addArticle, updateArticle, exportArticle } from "@/api/proj_qhy/article";

  export default {
    name: "Article",
    data() {
      return {
        // 遮罩层
        loading: true,
        // 选中数组
        ids: [],
        // 非单个禁用
        single: true,
        // 非多个禁用
        multiple: true,
        // 总条数
        total: 0,
        // 文章管理表格数据
        articleList: [],
        // 弹出层标题
        title: "",
        // 是否显示弹出层
        open: false,
        // 查询参数
        queryParams: {
          pageNum: 1,
          pageSize: 10,
          title: null,
          articleType: null,
          status: null,
          author: null
        },
        // 表单参数
        form: {},
        // 表单校验
        rules: {
          title: [
            { required: true, message: "文章标题不能为空", trigger: "blur" }
          ],
          articleType: [
            { required: true, message: "文章分类不能为空", trigger: "change" }
          ]
        }
      };
    },
    created() {
      this.getList();
    },
    methods: {
      /** 查询文章管理列表 */
      getList() {
        this.loading = true;
        listArticle(this.queryParams).then(response => {
          console.log('完整API响应:', response);
          this.articleList = response.rows;
          this.total = response.total;
          this.loading = false;
        }).catch(error => {
          console.error('获取文章列表失败:', error);
          this.loading = false;
        });
      },

      // 文章点击事件
      handleArticleClick(article) {
        // 这里可以跳转到文章详情页
        console.log('点击文章:', article);
      },

      // 点赞处理
      handleLike(article) {
        console.log('点赞文章:', article.id);
        // 这里调用点赞API
        // increaseLikeCount(article.id).then(() => {
        //   this.getList();
        // });
      },

      // 点踩处理
      handleHate(article) {
        console.log('点踩文章:', article.id);
        // 这里调用点踩API
        // increaseHateCount(article.id).then(() => {
        //   this.getList();
        // });
      },

      // 取消按钮
      cancel() {
        this.open = false;
        this.reset();
      },

      // 表单重置
      reset() {
        this.form = {
          id: null,
          title: null,
          digest: null,
          content: null,
          cover: null,
          articleType: "技术",
          status: "editting",
          viewCount: 0,
          commentCount: 0,
          likeCount: 0,
          hateCount: 0,
          bookmarkCount: 0,
          author: null,
          userId: null
        };
        this.resetForm("form");
      },

      /** 搜索按钮操作 */
      handleQuery() {
        this.queryParams.pageNum = 1;
        this.getList();
      },

      /** 重置按钮操作 */
      resetQuery() {
        this.resetForm("queryForm");
        this.handleQuery();
      },

      // 多选框选中数据
      handleSelectionChange(selection) {
        this.ids = selection.map(item => item.id);
        this.single = selection.length !== 1;
        this.multiple = !selection.length;
      },

      /** 新增按钮操作 */
      handleAdd() {
        this.reset();
        this.open = true;
        this.title = "添加文章";
      },

      /** 修改按钮操作 */
      handleUpdate(row) {
        this.reset();
        const id = row.id || this.ids;
        getArticle(id).then(response => {
          this.form = response.data;
          this.open = true;
          this.title = "修改文章";
        });
      },

      /** 提交按钮 */
      submitForm() {
        this.$refs["form"].validate(valid => {
        if (valid) {
        if (this.form.id != null) {
        updateArticle(this.form).then(response => {
        this.$modal.msgSuccess("修改成功");
        this.open = false;
        this.getList();
        });
        } else {
        addArticle(this.form).then(response => {
        this.$modal.msgSuccess("新增成功");
        this.open = false;
        this.getList();
        });
        }
        }
        });
      },

      /** 删除按钮操作 */
      handleDelete(row) {
        const ids = row.id || this.ids;
        this.$modal.confirm('是否确认删除文章编号为"' + ids + '"的数据项？').then(function() {
        return delArticle(ids);
        }).then(() => {
        this.getList();
        this.$modal.msgSuccess("删除成功");
        }).catch(() => {});
      },

      /** 导出按钮操作 */
      handleExport() {
        const queryParams = this.queryParams;
        this.$modal.confirm('是否确认导出所有文章数据项？').then(() => {
        this.exportLoading = true;
        return exportArticle(queryParams);
        }).then(response => {
        this.$download.name(response.msg);
        this.exportLoading = false;
        }).catch(() => {});
      }
    }
  };
</script>

<style scoped>
  .app-container {
    padding: 20px;
  }
  .mb8 {
    margin-bottom: 8px;
  }

  /* B站风格文章列表样式 */
  .article-list {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .article-item {
    display: flex;
    padding: 16px;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    cursor: pointer;
    transition: all 0.3s ease;
    border: 1px solid #e8e8e8;
  }

  .article-item:hover {
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
    transform: translateY(-2px);
  }

  .article-cover {
    flex-shrink: 0;
    margin-right: 16px;
  }

  .cover-image {
    width: 160px;
    height: 100px;
    border-radius: 6px;
    overflow: hidden;
  }

  .image-slot {
    width: 100%;
    height: 100%;
    background: #f5f7fa;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #909399;
    font-size: 24px;
  }

  .article-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    min-width: 0;
  }

  .article-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 8px;
  }

  .article-title {
    font-size: 16px;
    font-weight: 600;
    color: #18191c;
    margin: 0;
    flex: 1;
    margin-right: 12px;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .action-buttons {
    display: flex;
    gap: 8px;
    flex-shrink: 0;
  }

  .like-btn,
  .hate-btn {
    padding: 4px 8px;
    font-size: 12px;
    color: #61666d;
  }

  .like-btn:hover {
    color: #00aeec;
  }

  .hate-btn:hover {
    color: #ff4d4f;
  }

  .article-digest {
    font-size: 14px;
    color: #61666d;
    margin: 0 0 12px 0;
    line-height: 1.5;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .article-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 8px;
  }

  .article-author {
    font-size: 12px;
    color: #9499a0;
  }

  .article-stats {
    display: flex;
    align-items: center;
    gap: 16px;
    font-size: 12px;
    color: #9499a0;
  }

  .view-count {
    color: #61666d;
  }

  .publish-time {
    color: #9499a0;
  }

  .article-actions {
    display: flex;
    gap: 12px;
    justify-content: flex-end;
  }

  /* 响应式设计 */
  @media (max-width: 768px) {
    .article-item {
      flex-direction: column;
    }

    .article-cover {
      margin-right: 0;
      margin-bottom: 12px;
    }

    .cover-image {
      width: 100%;
      height: 180px;
    }

    .article-header {
      flex-direction: column;
      align-items: flex-start;
    }

    .action-buttons {
      margin-top: 8px;
    }

    .article-meta {
      flex-direction: column;
      align-items: flex-start;
      gap: 8px;
    }
  }
</style>